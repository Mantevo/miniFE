#-----------------------------------------------------------------------
SHELL = /bin/sh

MPIPATH = /opt/mpi

# CXX = nvcc --compiler-bindir `which CC`
# CC = nvcc --compiler-bindir `which CC`
# LINK = nvcc --compiler-bindir `which CC`

CC_HOST = `which CC`
CXX = nvcc
CC = nvcc
LINK = nvcc

CUDA = yes
MPI = yes
CUDA_ARCH = sm_35

ifeq ($(SVN), yes)
  KOKKOSPATH = /opt/Trilinos/kokkos
  KOKKOSPATH_INC = $(KOKKOSPATH)
else
  #when taking relative paths the include path must be one level further down 
  #because it starts off in the Obj directory
  KOKKOSPATH = ../kokkos
  KOKKOSPATH_INC = ../../kokkos
endif

HWLOCPATH = ./

PWD = `pwd`

SRC = $(shell ls *.cpp;)
CPY = $(PWD)/*.cpp

KOKKOS_SRC = $(shell cd $(KOKKOSPATH)/core/src/impl; ls *.cpp;)
KOKKOS_CPY = $(KOKKOSPATH)/core/src/impl/*.cpp

ifeq ($(OMP),yes)
KOKKOS_SRC += $(shell cd $(KOKKOSPATH)/core/src/OpenMP; ls *.cpp;)
KOKKOS_CPY += $(KOKKOSPATH)/core/src/OpenMP/*.cpp
else
KOKKOS_SRC += $(shell cd $(KOKKOSPATH)/core/src/Threads; ls *.cpp;)
KOKKOS_CPY += $(KOKKOSPATH)/core/src/Threads/*.cpp
endif

ifeq ($(CUDA),yes)
KOKKOS_CUDASRC += $(shell cd $(KOKKOSPATH)/core/src/Cuda; ls *.cu;)
KOKKOS_CPY += $(KOKKOSPATH)/core/src/Cuda/*.cu
endif

MINIFE_TYPES =  \
        -DMINIFE_SCALAR=double   \
        -DMINIFE_LOCAL_ORDINAL=int      \
        -DMINIFE_GLOBAL_ORDINAL=int

MINIFE_MATRIX_TYPE = -DMINIFE_CSR_MATRIX
# MINIFE_MATRIX_TYPE = -DMINIFE_ELL_MATRIX

#-----------------------------------------------------------------------
OBJ = $(KOKKOS_SRC:.cpp=.o) $(KOKKOS_CUDASRC:.cu=.o)

CPPFLAGS = --compiler-bindir $(CC_HOST) -m64 -O3 -I. -I../ -I../../utils -I../../fem $(MINIFE_TYPES) $(MINIFE_MATRIX_TYPE) -DMPICH_IGNORE_CXX_SEEK -I$(KOKKOSPATH_INC)/core/src/ -I$(KOKKOSPATH_INC)/containers/src -I$(KOKKOSPATH_INC)/linalg/src -I$(MPIPATH)/include -arch=$(CUDA_ARCH) -maxrregcount=64 -x cu -Xcompiler -fPIC -restrict  
LINKFLAGS = --compiler-bindir $(CC_HOST) -m64 -O3 -L$(MPIPATH)/lib -L$(INTELPATH)/lib/intel64 

ifeq ($(MPI), yes)
CPPFLAGS += -DHAVE_MPI -I$(MPIPATH)/include -DGPU_MPI
endif

ifeq ($(CUDA), yes)
CPPFLAGS += -DDEVICE=2 -DKOKKOS_HAVE_CUDA
endif

ifeq ($(CUSPARSE), yes)
CPPFLAGS += -DKOKKOS_USE_CUSPARSE
USRLIB += -lcusparse
endif

ifeq ($(CUBLAS), yes)
CPPFLAGS += -DKOKKOS_USE_CUBLAS
USRLIB += -lcublas
endif

ifeq ($(AVX), yes)
CPPFLAGS += -Xcompiler -mavx
LINKFLAGS += -mavx
endif

ifeq ($(OMP),yes)
CPPFLAGS += -DKOKKOS_HAVE_OPENMP -Xcompiler -fopenmp
LINKFLAGS += -fopenmp 
else
CPPFLAGS += -DKOKKOS_HAVE_PTHREAD 
USRLIB += -lpthread
endif

ifeq ($(HWLOC),yes)
CPPFLAGS += -DKOKKOS_HAVE_HWLOC -I$(HWLOCPATH)/include
USRLIB += -L$(HWLOCPATH)/lib -lhwloc 
endif

ifeq ($(RED_PREC), yes)
CPPFLAGS += --use_fast_math
endif

ifeq ($(DEBUG), yes)
CPPFLAGS += -g -G -DKOKKOSARRAY_EXPRESSION_CHECK -DENABLE_TRACEBACK
LINKFLAGS += -g
endif

ifeq ($(LIBRT),yes)
CPPFLAGS += -DKOKKOS_USE_LIBRT -DPREC_TIMER
USRLIB += -lrt
endif

ifeq ($(CUDALDG), yes)
CPPFLAGS += -DKOKKOS_USE_LDG_INTRINSIC
endif

SYSLIB =  -lcuda -lcudart $(LIBMPI) $(INTELLIB) $(LIBIB)


# For debugging, the macro MINIFE_DEBUG will cause miniFE to dump a log file
# from each proc containing various information.
# This macro will also enable a somewhat expensive range-check on indices in
# the exchange_externals function.

LDFLAGS = $(LINKFLAGS)
LIBS= $(USRLIB) $(SYSLIB)

# The MPICH_IGNORE_CXX_SEEK macro is required for some mpich versions,
# such as the one on my cygwin machine.

OBJ += BoxPartition.o YAML_Doc.o YAML_Element.o
OBJ += param_utils.o utils.o  mytimer.o
OBJ += main.o

copy: 
	@if [ ! -d Obj_titan ]; then mkdir Obj_titan; fi
	@echo '' > Obj_titan/KokkosCore_config.h
	@cp -p $(SRC) Obj_titan
	@cp -p $(KOKKOS_CPY) Obj_titan
	@cp Makefile.titan Obj_titan/Makefile
	@cd Obj_titan; ../get_common_files
	@cd Obj_titan; $(MAKE) all "OBJ = $(OBJ)"




MINIFE_INFO = 1
MINIFE_KERNELS = 0

vpath %.cpp ../../utils

all:generate_info miniFE.titan

miniFE.titan:$(OBJ) $(MAIN_OBJ) $(OBJS) $(UTIL_OBJS) $(OPTIONAL_OBJS) ../*.hpp generate_info
	$(INSTRUMENT) $(LINK) $(CXXFLAGS) $(OBJ) $(MAIN_OBJ) $(OBJS) $(UTIL_OBJS) $(OPTIONAL_OBJS) -o ../miniFE.titan $(LDFLAGS) $(OPTIONAL_LIBS) $(LIBS)

generate_info:
	./generate_info_header "$(CXX)" "$(CXXFLAGS)" "miniFE" "MINIFE"

test:
	./run_test titan
.SUFFIXES: .cu

%.o:%.cpp *.hpp
	$(CXX) $(CUDA_SWITCH) $(CXXFLAGS) $(CPPFLAGS) -DMINIFE_INFO=$(MINIFE_INFO) -DMINIFE_KERNELS=$(MINIFE_KERNELS) -c $<
.cu.o:
	$(CXX) $(CUDA_SWITCH) $(CXXFLAGS) $(CPPFLAGS) -DMINIFE_INFO=$(MINIFE_INFO) -DMINIFE_KERNELS=$(MINIFE_KERNELS) -c $<

%.o:%.c *.h
	$(CC) $(CFLAGS) $(CPPFLAGS) -c $<

clean:
	rm -rf *.o *.a *.x *.linkinfo miniFE_info.hpp Obj_titan

realclean: clean
	rm -f gmon.out gprof.* *~ *.yaml *.TVD.* *.mtx* *.vec* minife_debug*
  
